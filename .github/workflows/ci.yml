
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-pytest_testing-python

name: Python grader

on: [push]

permissions:
  contents: write

jobs:

  pytest_testing:
  
    if: github.actor != 'github-classroom[bot]'
    runs-on: ubuntu-latest
    
    steps:

    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test with pytest
      continue-on-error: true
      run: |
        pytest ./.python/test_.py --junitxml=./.python/results.xml
        if [ -f ./.python/results.xml ]; then echo "results.xml created"; fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-results-artifact
        path: ./.python/results.xml

  pytest_scoring:

    if: github.actor != 'github-classroom[bot]'
    runs-on: ubuntu-latest

    outputs:
      grade: ${{ steps.pytest-score.outputs.pytest_score }}
      string: ${{ steps.pytest-score.outputs.pytest_string }}
    
    needs: pytest_testing

    steps:

    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: my-results-artifact
        path: ./.python/dir

    - name: Restore file
      run:
        mv ./.python/dir/results.xml ./.python/results.xml
     
    - name: pytest score
      id: pytest-score
      run: |
        output=$(python ./.python/get_pytest_score.py ./.python/results.xml)
        echo $output
        pytest_score=$(echo "$output" | cut -d',' -f1)
        echo "pytest_score=$pytest_score" >> $GITHUB_OUTPUT
        pytest_string=$(echo "$output" | cut -d',' -f2)
        echo "pytest_string=$pytest_string" >> $GITHUB_OUTPUT

  pylint_scoring:
  
    if: github.actor != 'github-classroom[bot]'
    runs-on: ubuntu-latest
    
    outputs:
      pylint_score: ${{ steps.pylint.outputs.pylint_score }}

    steps:

    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with pylint
      id: pylint
      run: |
        score=$(python -m pylint *.py | grep rated | awk '{print $7}' | cut -d'/' -f1)
        if [ -z "$score" ]; then
          echo "Failed to extract Pylint score."
          exit 1
        fi
        pylint_score=$(echo "scale=2; $score / 10" | bc)
        echo "pylint_score=$pylint_score" >> $GITHUB_OUTPUT
